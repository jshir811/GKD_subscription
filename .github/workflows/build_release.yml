name: build_release

on:
  schedule:
    - cron: '0 19 */3 * *'
  workflow_dispatch:

jobs:
  build_release:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码（必须获取完整提交历史）
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 关键：获取全部提交历史

      # 2. 读取上一次成功构建的缓存
      - name: Restore last build SHA
        id: restore-cache
        uses: actions/cache@v3
        with:
          path: .last_build_sha
          key: build-${{ github.ref }}-last-successful-sha

      # 3. 获取当前提交的 SHA
      - name: Get current SHA
        id: current-sha
        run: |
          CURRENT_SHA=$(git rev-parse HEAD)
          echo "current_sha=$CURRENT_SHA" >> $GITHUB_ENV
          echo "Current SHA: $CURRENT_SHA"

      # 4. 检查是否有缓存（是否第一次运行）
      - name: Check cache status
        id: check-cache
        run: |
          if [ -f .last_build_sha ]; then
            LAST_SHA=$(cat .last_build_sha)
            echo "last_sha=$LAST_SHA" >> $GITHUB_ENV
            echo "Last SHA from cache: $LAST_SHA"
          else
            echo "首次运行，无历史记录"
            echo "last_sha=none" >> $GITHUB_ENV
          fi

      # 5. 比较两次运行之间的 src 变更
      - name: Check src changes
        id: check-changes
        run: |
          if [ "${{ env.last_sha }}" == "none" ]; then
            # 首次运行，强制触发构建
            echo "changed=true" >> $GITHUB_ENV
          else
            # 比较两次提交的差异
            if git diff --exit-code ${{ env.last_sha }} ${{ env.current_sha }} -- src; then
              echo "No changes detected in 'src' directory."
              echo "changed=false" >> $GITHUB_ENV
            else
              echo "Changes detected in 'src' directory."
              echo "changed=true" >> $GITHUB_ENV
            fi
          fi

      # 6. 若无变更则终止流程
      - name: Terminate if no changes
        if: env.changed != 'true'
        run: |
          echo "No changes since last successful build, terminating workflow."
          exit 1

      # 7. 正常执行构建流程（保持你的原有步骤）
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
      - run: pnpm install
      - run: pnpm run build
      - id: version
        run: |
          version=$(node -e "import('@gkd-kit/tools').then((m) => m.stdoutGkdVersion());")
          echo "version=${version}" >> "$GITHUB_OUTPUT"
      - id: update_pkg_version
        run: node -e "import('@gkd-kit/tools').then((m) => m.updatePkgVersion());"
      - name: Git commit
        id: commit
        run: |
          git config --local user.email github-actions[bot]@users.noreply.github.com
          git config --local user.name github-actions[bot]
          git add .
          git commit -a -m "chore: v${{ steps.version.outputs.version }}"
        continue-on-error: true
      - name: Git push
        if: ${{ steps.commit.outcome == 'success' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true
      - name: Create Release
        id: create_release
        if: ${{ steps.commit.outcome == 'success' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: ./dist/CHANGELOG.md
      - name: Publish package
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ steps.commit.outcome == 'success' && env.NPM_TOKEN != '' }}
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          pnpm publish --no-git-checks
          node -e "import('@gkd-kit/tools').then((m) => m.syncNpmmirror());"

      # 8. 仅在构建成功后更新缓存
      - name: Save current SHA to cache
        if: success()  # 仅当构建成功时保存
        run: |
          echo ${{ env.current_sha }} > .last_build_sha
      - name: Upload new cache
        uses: actions/cache@v3
        if: success()
        with:
          path: .last_build_sha
          key: build-${{ github.ref }}-last-successful-sha
