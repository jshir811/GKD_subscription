name: build_release

on:
  schedule:
    - cron: '0 19 */3 * *'
  workflow_dispatch:

jobs:
  build_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore last build SHA
        id: restore-cache
        uses: actions/cache@v3
        with:
          path: .last_build_sha
          key: build-${{ github.ref }}-last-successful-sha

      - name: Get current SHA
        id: current-sha
        run: |
          CURRENT_SHA=$(git rev-parse HEAD)
          echo "current_sha=$CURRENT_SHA" >> $GITHUB_ENV

      - name: Check cache status
        id: check-cache
        run: |
          if [ -f .last_build_sha ]; then
            LAST_SHA=$(cat .last_build_sha)
            echo "last_sha=$LAST_SHA" >> $GITHUB_ENV
          else
            echo "last_sha=none" >> $GITHUB_ENV
          fi

      - name: Check src changes
        id: check-changes
        run: |
          if [ "${{ env.last_sha }}" == "none" ]; then
            echo "changed=true" >> $GITHUB_ENV
          else
            if git diff --exit-code ${{ env.last_sha }} ${{ env.current_sha }} -- src; then
              echo "changed=false" >> $GITHUB_ENV
            else
              echo "changed=true" >> $GITHUB_ENV
            fi
          fi

      - name: Log change status
        run: |
          if [ "${{ env.changed }}" == "true" ]; then
            echo "✅ 检测到变更，继续构建流程"
          else
            echo "⏩ 无变更，跳过构建步骤"
          fi

      - name: Setup Node.js
        if: env.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        if: env.changed == 'true'
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        if: env.changed == 'true'
        run: pnpm install

      - name: Build project
        if: env.changed == 'true'
        run: pnpm run build

      - name: Generate timestamp version
        id: version
        run: |
          # 生成北京时间的时间戳（格式：20241030153045）
          VERSION=$(TZ=Asia/Shanghai date +"%Y%m%d%H%M%S")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "生成的版本号: $VERSION"

      - name: Update package version
        if: env.changed == 'true'
        id: update_pkg_version
        run: echo "跳过 package.json 版本更新（按需调整）"

      - name: Git commit
        if: env.changed == 'true'
        id: commit
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "chore: 自动更新版本号至 ${{ steps.version.outputs.version }}" || echo "无变更可提交"
        continue-on-error: true

      - name: Git push
        if: env.changed == 'true' && steps.commit.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: Create Release
        if: env.changed == 'true' && steps.commit.outcome == 'success'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: "基于时间戳的自动构建版本"

      - name: Publish package
        if: env.changed == 'true' && steps.commit.outcome == 'success' && env.NPM_TOKEN != ''
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          pnpm publish --no-git-checks
          node -e "import('@gkd-kit/tools').then((m) => m.syncNpmmirror());"

      - name: Save current SHA to cache
        if: success() && env.changed == 'true'
        run: |
          echo ${{ env.current_sha }} > .last_build_sha

      - name: Upload new cache
        if: success() && env.changed == 'true'
        uses: actions/cache@v3
        with:
          path: .last_build_sha
          key: build-${{ github.ref }}-last-successful-sha
